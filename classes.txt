public interface Administrator{
	
	public void createClient(Client client);

}

public class MasterAdmin extends Administrator{

	public void createClient(Client client){
		if(!repository.clientExists()){
			repository.addClient();
		}else{
			System.out.println("Client Exists! ");
		}
	}



}

public abstract class Client{

}

public class WarehouseAgent extends Client{

	private hashmap<int,int> ratings;
	private hashmap controlledWarehouses<int, warehouse> // Warehouse name or warehouse ID
	public void receiveRating(Int ownerId, Int rating){

	try{
	ratings.add(ownerId, rating);
	}
	catch(Exception e){

	}

}

	public void rentWarehouse(RentReceipt receipt,Warehouse Id){
	
	try{
	Warehouse warehouse = repository.getWarehouseById(id);	
	
	}
}

	
}

public class Owner extends Client{

		public void CreatedWarehouse(Warehouse warehouse){
	try{
		repository.addWarehouse(warehouse);
	}	
	catch (Exception e){

	}

}


	public void AddAgent(Agent agent){
	
	try{
	repository.addAgent(agent);
	}
	catch(Exception e){
	}
}

}

public class Warehouse{

	private RentReceipt receipt;
	private double squareFeet;
	private double temperature;
	private double humidityPercent; // could combine the two into a class/state or remove one of them;
	private enum warehouseCategory;
	ect...

}

public class RentReceipt{
	private Client client;
	private Timestamp startDate;
	private Timestamp endDate;
	private double rentPerMonth;
}



